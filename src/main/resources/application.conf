akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/sreenu/journal"

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/sreenu/snapshot"

localStores {
akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/localStores/journal"

akka.persistence.journal.leveldb.compaction-intervals {
    SimplePersistentAcor = 1000
    "*" = 5000
}

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/localStores/snapshot"

}

PostgresDemo {
   akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  // default values
}

customSerializtingDemo{
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
        java = "akka.serialization.JavaSerializer"
        sreenu = "part3_stores_serialization.UserRegistrationSerializer"
    }
    serialization-bindings {
        "part3_stores_serialization.UserRegistered" = sreenu
        //JavaSerializer is default one
    }
  }
}

eventAdaptor {
 akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
  cassandra-journal {
    event-adapters {
        guitar-adapters = "part4_practices.EventAdapators$GuitarReadEventAdaptor"
    }
    event-adapter-bindings {
    "part4_practices.EventAdapators$GuitarAdded" = guitar-adapters
    }
  }
}
detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      detach-adapter = "part4_practices.ModelAdaptor"
    }

    event-adapter-bindings {
      "part4_practices.DomainModel$ApplyCoupon" = detach-adapter
      "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
     # "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
    }
  }
}

persistentQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cassandra-journal {
    event-adapters {
         tagging = "part4_practices.PersistentQueryDemo$MusicStoreEventAdaptor"
    }

    event-adapter-bindings {
      "part4_practices.PersistentQueryDemo$PlayListPurchased" = tagging
    }
  }
}